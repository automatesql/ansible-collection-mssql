---
# tasks file for sql_ag_patch
- name: Prerequisites
  ansible.builtin.include_tasks: prerequisites.yml
  tags: prereq

- name: Identify Primary node
  ansible.builtin.include_tasks: identify_primary.yml
  tags: get_primary

- name: Validate AG health state prior to installing updates
  ansible.builtin.include_tasks: validate.yml
  vars:
    post_validation: false
  when:
    - ag_current_primary == server_instance

- name: Patch secondaries
  ansible.builtin.include_tasks: patch_secondaries.yml
  when:
    - ag_current_primary != server_instance
    - is_patch_needed
  tags: patch_secondary

# - name: Check vars hostname
#   ansible.builtin.debug:
#     msg: "{{ ansible_hostname }}"

# - name: Check vars ag_name
#   ansible.builtin.debug:
#     msg: "{{ ag_name }}"

# On the primary node, if a patch is needed, orchestrate the rolling update:
# 1. Failover the AG to a secondary replica.
# 2. Patch this node (which is now a secondary). The patch_secondaries.yml task is reused for this.
# 3. Optionally, fail back to this node to restore it as the primary.
- name: Patch primary if required
  when:
    - ag_current_primary == server_instance
    - is_patch_needed
    - patch_primary
  block:
    - name: Failover to new primary
      ansible.builtin.include_tasks: failover.yml

    - name: Patch former primary
      ansible.builtin.include_tasks: patch_secondaries.yml

    - name: Failback to the original primary
      ansible.builtin.include_tasks: failback.yml
      when:
        - sql_ag_failback

- name: Validate final state of AG
  ansible.builtin.include_tasks: validate.yml
  vars:
    post_validation: true

# Cleanup temporary patch files.
# This runs only if the current version matches the desired version,
# implying a successful patch. On failure, files are left for debugging.
- name: Cleanup temporary files
  ansible.builtin.include_tasks: cleanup.yml
  when:
    - final_sql_version_info.output[0] == desired_sql_version
