---
# This task fails the Availability Group over to a suitable, patched secondary replica.
# It assumes the failover_ag.ps1 script sets the '$Ansible.Result' variable
# to a PowerShell object with a 'Success' boolean property, a 'Message' string
# property, and a 'NewPrimary' string property.

- name: Failover | Failover AG from the current primary to a patched synchronous secondary
  ansible.windows.win_powershell:
    script: "{{ lookup('file', 'failover_ag.ps1') }}"
    parameters:
      # The node that is currently primary, which we are failing over from.
      AgCurrentPrimary: "{{ ag_current_primary }}"
      AgName: "{{ ag_name }}"
      # The script will find a secondary that is at this version to fail over to.
      DesiredSqlVersion: "{{ desired_sql_version }}"
  register: failover_result
  # Retry a few times in case a replica isn't immediately ready for failover.
  until: failover_result.result.Success | default(false)
  retries: 3
  delay: 15
  # Explicitly fail if the script doesn't report success.
  failed_when: not (failover_result.result.Success | default(false))

- name: Debug failover result (if verbosity is high)
  ansible.builtin.debug:
    msg: "{{ failover_result.result }}"
  when: ansible_verbosity > 1

- name: Set new primary fact from failover result
  ansible.builtin.set_fact:
    new_primary: "{{ failover_result.result.NewPrimary }}"
