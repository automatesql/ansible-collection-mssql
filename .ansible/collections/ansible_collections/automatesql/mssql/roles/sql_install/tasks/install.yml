---
- name: Set UpdateSource variable if updates are enabled
  ansible.builtin.set_fact:
    sql_install_update_source_path: '{{ sql_install_temp_folder }}\updates'
  when: sql_install_enableupdates.lower() == "true"

- name: "Set AgtSvcAccount variable if agent password or account contains '$'"
  ansible.builtin.set_fact:
    sql_install_agent_svc_account: "{{ sql_install_agent_svc_account }}"
  when: sql_install_agent_svc_password is defined or (sql_install_agent_svc_account is defined and sql_install_agent_svc_account is search('\$'))

- name: "Set SQLSvcAccount variable if service password or account contains '$'"
  ansible.builtin.set_fact:
    sql_install_sql_svc_account: "{{ sql_install_sql_svc_account }}"
  when: sql_install_sql_svc_password is defined or (sql_install_sql_svc_account is defined and sql_install_sql_svc_account is search('\$'))

- name: Set ProductKey variable
  ansible.builtin.set_fact:
    sql_install_product_key: >-
      {{ {
        'Standard Developer': '33333-00000-00000-00000-00000',
        'Enterprise Developer': '22222-00000-00000-00000-00000'
      }.get(sql_install_edition, '00000-00000-00000-00000-00000') }}

- name: Render host-specific sql_setup_task.j2 template
  ansible.builtin.template:
    src: sql_setup_task.j2
    dest: "{{ role_path }}/tmp/sql_setup_rendered_task_{{ inventory_hostname }}.yml"
    mode: '0644'
  delegate_to: localhost
  run_once: true
  vars:
    ansible_shell_type: sh
    ansible_shell_executable: /bin/sh

- name: Include rendered host-specific SQL Setup task
  ansible.builtin.include_tasks:
    file: "{{ role_path }}/tmp/sql_setup_rendered_task_{{ inventory_hostname }}.yml"

- name: Clean up rendered host-specific SQL Setup task
  ansible.builtin.file:
    path: "{{ role_path }}/tmp/sql_setup_rendered_task_{{ inventory_hostname }}.yml"
    state: absent
  delegate_to: localhost
  run_once: true
  vars:
    ansible_shell_type: sh
    ansible_shell_executable: /bin/sh
