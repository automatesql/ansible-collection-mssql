---
- name: Determine if the default instance exists.
  ansible.windows.win_service:
    name: "MSSQLSERVER"
  register: service_info

# - name: End play if default instance already exists.
#   ansible.builtin.meta: end_play
#   when: service_info.exists

- name: Set power plan to high performance
  community.windows.win_power_plan:
    name: high performance



- name: Create temp folder on target
  ansible.windows.win_file:
    path: "{{ sql_install_temp_folder }}"
    state: directory

- name: Create the updates folder in temp on target
  ansible.windows.win_file:
    path: "{{ sql_install_temp_folder }}\\updates"
    state: directory
  when:
    - sql_install_enableupdates == "true"

- name: Copy SQL Server iso
  ansible.windows.win_copy:
    src: "{{ sql_install_share }}/{{ item.version }}/{{ item.name }}"
    dest: "{{ sql_install_temp_folder }}\\"
    remote_src: false
  loop: "{{ sql_install_iso_source }}"
  when:
    - not service_info.exists

- name: Copy SQL Server update
  ansible.windows.win_copy:
    src: "{{ sql_install_share }}/{{ item.version }}/{{ item.name }}"
    dest: "{{ sql_install_temp_folder }}"
    remote_src: false
  loop: "{{ sql_install_update_source }}"
  when:
    - sql_install_enableupdates == "true"

- name: Copy SQL scripts
  ansible.windows.win_copy:
    src: "files/sql_scripts/"
    dest: "{{ sql_install_temp_folder }}"
    remote_src: false

- name: Generate configuration ini
  ansible.builtin.template:
    src: "{{ item.config }}"
    dest: "{{ sql_install_temp_folder }}\\Configuration.ini"
  loop: "{{ sql_install_iso_source }}"

- name: Create an instance name variable that includes localhost.  Default instance.
  ansible.builtin.set_fact:
    instance_name_var: "localhost"
  when:
    - sql_install_instance_name == "MSSQLSERVER"

- name: Return instance_name_var
  ansible.builtin.debug:
    msg: "{{ instance_name_var }}"
